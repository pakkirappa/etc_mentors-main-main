name: CI - Syntax Check and Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  frontend-checks:
    name: Frontend Checks (React TypeScript)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: npx tsc --noEmit

      - name: ESLint syntax and style check
        run: npm run lint

      - name: Build frontend
        run: npm run build

      - name: Check for unused dependencies
        run: |
          npm install -g depcheck
          depcheck --ignores="@types/*,@vitejs/*,vite,autoprefixer,postcss,tailwindcss"

  backend-checks:
    name: Backend Checks (Node.js)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: examhub-backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./examhub-backend
        run: npm ci

      - name: JavaScript syntax check
        working-directory: ./examhub-backend
        run: |
          # Check main server file
          node -c server.js
          # Check all JavaScript files recursively
          for file in $(find . -name "*.js" -not -path "./node_modules/*"); do
            echo "Checking syntax: $file"
            node -c "$file"
          done

      - name: Check for potential security vulnerabilities
        working-directory: ./examhub-backend
        run: npm audit --audit-level=moderate

      - name: Check for unused dependencies
        working-directory: ./examhub-backend
        run: |
          npm install -g depcheck
          depcheck --ignores="path"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install global dependencies
        run: |
          npm install -g prettier

      - name: Check code formatting (Frontend)
        run: |
          # Check if prettier would make changes to TypeScript/React files
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
        continue-on-error: true

      - name: Check code formatting (Backend)
        working-directory: ./examhub-backend
        run: |
          # Check if prettier would make changes to JavaScript files
          npx prettier --check "**/*.{js,json}" --ignore-path ../node_modules
        continue-on-error: true

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME\|XXX" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
            echo "⚠️ Found TODO/FIXME comments in code"
          else
            echo "✅ No TODO/FIXME comments found"
          fi
        continue-on-error: true

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Frontend security audit
        run: |
          npm ci
          npm audit --audit-level=high
        continue-on-error: true

      - name: Backend security audit
        working-directory: ./examhub-backend
        run: |
          npm ci
          npm audit --audit-level=high
        continue-on-error: true

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          if grep -r -i "password\|secret\|token\|key" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude="*.md" .; then
            echo "⚠️ Found potential hardcoded secrets - please review"
          else
            echo "✅ No obvious hardcoded secrets found"
          fi
        continue-on-error: true

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [frontend-checks, backend-checks, code-quality, security-checks]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Checks | ${{ needs.frontend-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Checks | ${{ needs.backend-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Checks | ${{ needs.security-checks.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.frontend-checks.result }}" == "failure" || "${{ needs.backend-checks.result }}" == "failure" ]]; then
            echo "❌ Critical checks failed"
            exit 1
          else
            echo "✅ All critical checks passed"
          fi
